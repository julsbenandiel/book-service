// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.1
// source: proto/book.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "book";

export interface Book {
  title: string;
  author: string;
  isbn: string;
}

export interface GetAllBooksRequest {
  sort: string;
  id: string;
}

export interface GetBooksResponse {
  books: Book[];
}

function createBaseBook(): Book {
  return { title: "", author: "", isbn: "" };
}

export const Book: MessageFns<Book> = {
  encode(message: Book, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.author !== "") {
      writer.uint32(18).string(message.author);
    }
    if (message.isbn !== "") {
      writer.uint32(26).string(message.isbn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Book {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.author = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.isbn = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Book {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      author: isSet(object.author) ? globalThis.String(object.author) : "",
      isbn: isSet(object.isbn) ? globalThis.String(object.isbn) : "",
    };
  },

  toJSON(message: Book): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.author !== "") {
      obj.author = message.author;
    }
    if (message.isbn !== "") {
      obj.isbn = message.isbn;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Book>, I>>(base?: I): Book {
    return Book.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Book>, I>>(object: I): Book {
    const message = createBaseBook();
    message.title = object.title ?? "";
    message.author = object.author ?? "";
    message.isbn = object.isbn ?? "";
    return message;
  },
};

function createBaseGetAllBooksRequest(): GetAllBooksRequest {
  return { sort: "", id: "" };
}

export const GetAllBooksRequest: MessageFns<GetAllBooksRequest> = {
  encode(message: GetAllBooksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sort !== "") {
      writer.uint32(10).string(message.sort);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllBooksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllBooksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sort = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllBooksRequest {
    return {
      sort: isSet(object.sort) ? globalThis.String(object.sort) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: GetAllBooksRequest): unknown {
    const obj: any = {};
    if (message.sort !== "") {
      obj.sort = message.sort;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllBooksRequest>, I>>(base?: I): GetAllBooksRequest {
    return GetAllBooksRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllBooksRequest>, I>>(object: I): GetAllBooksRequest {
    const message = createBaseGetAllBooksRequest();
    message.sort = object.sort ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetBooksResponse(): GetBooksResponse {
  return { books: [] };
}

export const GetBooksResponse: MessageFns<GetBooksResponse> = {
  encode(message: GetBooksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.books) {
      Book.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBooksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBooksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.books.push(Book.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBooksResponse {
    return { books: globalThis.Array.isArray(object?.books) ? object.books.map((e: any) => Book.fromJSON(e)) : [] };
  },

  toJSON(message: GetBooksResponse): unknown {
    const obj: any = {};
    if (message.books?.length) {
      obj.books = message.books.map((e) => Book.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBooksResponse>, I>>(base?: I): GetBooksResponse {
    return GetBooksResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBooksResponse>, I>>(object: I): GetBooksResponse {
    const message = createBaseGetBooksResponse();
    message.books = object.books?.map((e) => Book.fromPartial(e)) || [];
    return message;
  },
};

export type BooksService = typeof BooksService;
export const BooksService = {
  getAllBooks: {
    path: "/book.Books/GetAllBooks",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllBooksRequest) => Buffer.from(GetAllBooksRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAllBooksRequest.decode(value),
    responseSerialize: (value: GetBooksResponse) => Buffer.from(GetBooksResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetBooksResponse.decode(value),
  },
} as const;

export interface BooksServer extends UntypedServiceImplementation {
  getAllBooks: handleUnaryCall<GetAllBooksRequest, GetBooksResponse>;
}

export interface BooksClient extends Client {
  getAllBooks(
    request: GetAllBooksRequest,
    callback: (error: ServiceError | null, response: GetBooksResponse) => void,
  ): ClientUnaryCall;
  getAllBooks(
    request: GetAllBooksRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetBooksResponse) => void,
  ): ClientUnaryCall;
  getAllBooks(
    request: GetAllBooksRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetBooksResponse) => void,
  ): ClientUnaryCall;
}

export const BooksClient = makeGenericClientConstructor(BooksService, "book.Books") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): BooksClient;
  service: typeof BooksService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
